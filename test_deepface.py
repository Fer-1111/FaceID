import cv2
import numpy as np
from deepface import DeepFace
import tensorflow as tf

print("üöÄ Probando DeepFace...")
print(f"TensorFlow version: {tf.__version__}")
print("‚úÖ DeepFace importado correctamente")

# Test 1: Verificar que DeepFace funciona con enforce_detection=False
print("\nüìù Test 1: Verificar funcionamiento b√°sico...")
try:
    # Crear imagen de prueba (no necesita ser una cara real)
    img = np.random.randint(0, 255, (224, 224, 3), dtype=np.uint8)
    result = DeepFace.analyze(img, actions=['emotion'], enforce_detection=False, silent=True)
    print("‚úÖ Test 1 exitoso: DeepFace funciona correctamente")
except Exception as e:
    print(f"‚ùå Test 1 fall√≥: {e}")

# Test 2: Probar con la c√°mara web
print("\nüìπ Test 2: Probando con c√°mara web...")
print("Presiona 'q' para salir del test")

try:
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("‚ùå No se pudo acceder a la c√°mara")
    else:
        print("‚úÖ C√°mara iniciada correctamente")
        
        frame_count = 0
        while True:
            ret, frame = cap.read()
            if not ret:
                print("‚ùå No se pudo capturar frame")
                break
            
            frame = cv2.flip(frame, 1)  # Efecto espejo
            
            # Intentar an√°lisis cada 30 frames para no sobrecargar
            if frame_count % 30 == 0:
                try:
                    result = DeepFace.analyze(frame, actions=['emotion', 'age', 'gender'], 
                                            enforce_detection=False, silent=True)
                    
                    # Mostrar resultados en consola
                    if isinstance(result, list):
                        for i, face in enumerate(result):
                            print(f"üé≠ Cara {i+1}: {face['dominant_emotion']} - {face['age']} a√±os - {face['dominant_gender']}")
                    else:
                        print(f"üé≠ Emoci√≥n: {result['dominant_emotion']} - {result['age']} a√±os - {result['dominant_gender']}")
                    
                    # Mostrar texto en el frame
                    cv2.putText(frame, "DeepFace funcionando correctamente!", (10, 30), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Error en an√°lisis: {e}")
                    cv2.putText(frame, f"Error: {str(e)[:50]}", (10, 30), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
            
            # Mostrar informaci√≥n b√°sica
            cv2.putText(frame, "Test DeepFace - Presiona 'q' para salir", (10, frame.shape[0] - 10), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            
            cv2.imshow('Test DeepFace', frame)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
            
            frame_count += 1
        
        cap.release()
        cv2.destroyAllWindows()
        print("‚úÖ Test 2 completado")

except Exception as e:
    print(f"‚ùå Error en test de c√°mara: {e}")

print("\nüéâ Pruebas completadas!")
print("Si viste emociones detectadas, ¬°DeepFace est√° funcionando perfectamente!")
print("Ahora puedes ejecutar el c√≥digo principal de reconocimiento facial.")